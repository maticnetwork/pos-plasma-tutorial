# This is a basic workflow to help you get started with Actions

name: Prod deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the staging branch
  push:
    branches: [exit-pos-plasma]

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy_prod:
    name: Prod Deployment
    permissions:
      id-token: write
      contents: write
    environment: prod
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-1
      ECR_REPOSITORY: withdraw-ecr
      ECS_SERVICE: withdraw-ecs-service
      ECS_CLUSTER: frontend-prod-ecs-cluster
      ECS_TASK_DEFINITION: prod-taskdef.json
      CONTAINER_NAME: withdraw
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::042947190491:role/withdraw-GithubActionsRole
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Runs a single command using the runners shell
      - name: INSTALL
        run: npm install

      - name: BUILD
        run: npm run build

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

